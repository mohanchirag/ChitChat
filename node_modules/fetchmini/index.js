class HTTP {
  request(url, method, body) {
    if (method === 'GET') {
      if (body) {
        if (!(body instanceof URLSearchParams)) throw new Error('Use URLSearchParams when passing params for GET request');
        url += '?' + body.toString();
      }
    } else {
      body = JSON.stringify(body);
    }
    const req = new Request(url, {
      method,
      headers: this.requestInterceptor(),
      body: method === 'GET' ? undefined : body
    });
    return fetch(req)
      .then(async (res) => {
        // console.debug(res);
        const data = await res.json();
        await this.responseInterceptor(data);
        if (!res.ok) {
          return Promise.reject({
            statusCode: data.statusCode,
            error: data.error,
            message: data.message
          });
        }
        // console.debug('data', data);
        return Promise.resolve(data);
      })
      // .then(async (data) => { return this.responseInterceptor(data); })
      .catch((HTTPException) => {
        // console.warn('request failed', JSON.stringify(HTTPException));
        return Promise.reject(HTTPException);
      });
  }
  requestInterceptor() {
    return new Headers();
  }
  async responseInterceptor() {}
  get(url, searchParams) {
    return this.request(url, 'GET', searchParams);
  }
  post(url, body) {
    return this.request(url, 'POST', body);
  }
  put(url, body) {
    return this.request(url, 'PUT', body);
  }
  del(url, body) {
    return this.request(url, 'DELETE', body);
  }
}

let http;
if (!http) http = new HTTP();
module.exports = http;
